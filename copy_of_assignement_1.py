# -*- coding: utf-8 -*-
"""Copy of Assignement-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OkhV6oQAOoMXNLXeVNQkEG8_jzd8FRy3

# CISC 121 ‚Äì Assignment-1

## üîó Problem
Fizz Buzz ‚Äì https://leetcode.com/problems/fizz-buzz/

Palindrome Number ‚Äì https://leetcode.com/problems/palindrome-number/

Reverse Integer ‚Äì https://leetcode.com/problems/reverse-integer/

Two Sum ‚Äì https://leetcode.com/problems/two-sum/

Valid Palindrome ‚Äì https://leetcode.com/problems/valid-palindrome/

#  Problem 1

## 1. Understanding & Breakdown

_Understand the problem, inputs/outputs, constraints, and  write down your plan or steps to solve the problem or draw the flowchart using digital or real pen-paper. Insert the image._

**AI Level 1** is allowed to understand the concept, but you need to sketch the problem down by yourself.

**Your effort is more important than the accuracy for this section**

## 2. Peer Review & Draft Code

**Review Guidance:**  
Visit the **"Solutions"** tab on LeetCode for the selected problem and review at least one top-rated solution. You may also search for relevant discussions or Q&A threads on **Stack Overflow** or other forums to understand how others approached the problem.

Then, write your own version based on what you understood. The goal is not to copy but to apply what you learned. Always include links to the resources you reviewed.

---

### **Example Answer (for "Palindrome Number"):**

I reviewed the top solution under the LeetCode ‚ÄúSolutions‚Äù tab and one post on Stack Overflow:  
https://stackoverflow.com/questions/17129222/how-to-check-if-a-number-is-palindrome-in-python  

I learned that I can reverse the integer using a loop with modulo and division instead of converting it to a string. Using this idea, I tried writing a function that reverses the number and compares it to the original.
"""

# Your draft code here (does not need to be fully correct)

"""## 3. Final Correct Code

_This version must pass all required test cases and handle edge cases correctly._

At this stage, you may:
- Use reviewed solutions or programming AI tools (e.g., ChatGPT, GitHub Copilot) to refine and fix errors.
- Refactor your draft to ensure accuracy and completeness.

 **AI Level 4 is allowed**, but you **must include a disclaimer** that clearly states what tools you used, how you used them, and for which part of the code.

"""

# Final working solution
# [AI Disclaimer example: Used ChatGPT with prompt ‚ÄúHow to handle recursion base case‚Äù only for concept]

"""Add the screenshot of output for all the test cases from your working solutions.

## 4. Review & Fixes
_What did you improve from your draft? 2 fixes with your comments._
"""

# Fix 1: Simplified bracket matching using a dictionary

# Draft version (manual and repetitive logic)
if char == ")" and stack[-1] == "(": stack.pop()
elif char == "]" and stack[-1] == "[": stack.pop()
elif char == "}" and stack[-1] == "{": stack.pop()
else: return False

# Fixed version (cleaner and scalable)
mapping = {")": "(", "]": "[", "}": "{"}
if stack:
    top = stack.pop()
else:
    top = "#"
if mapping[char] != top:
    return False

# Fix 2: Prevented runtime error when stack is empty

# Draft version: crashes if the stack is empty
top = stack.pop()  # This causes IndexError if stack is empty

# Fixed version: avoids crash by using fallback value
top = stack.pop() if stack else '#'

"""## 5. Reflection on Your Contribution
_Where did AI or Other's code helped or fail to help? What specific logic or debugging did you contribute yourself?_

## Example
1. I used ChatGPT (Level 4) to help identify an edge case where my draft code failed when the input string started with a closing bracket. I also used ChatGPT to help structure the final loop and mapping dictionary, but verified all logic myself by tracing the code.

2.  I used ChatGPT to help write the loop. But the code had an indentation error after the `if` block, which caused it to fail. I fixed the spacing and made sure the code runs correctly.

3. I used opensource code from Github. I found and fixed a logic bug where they used if s[i] == '(' or ')', which always returned True. I corrected it to properly check both conditions.

#  Repeat this template for Problems 2‚Äì5
You may copy-paste the above section 4 more times or duplicate cells in your notebook environment.

Remember:
Proper attribution  
No copy-pasting from AI or others

1. Your Name:
2. Section:
3. ID:
4. Github Link of this notebook (the link of Github Repo where you saved your notebook)
5. Chat (Saved Chat  with your AI tool in a shared Document link)[Optional]

# **The most important part of writing code is not the code itself, but the thinking that leads to it. Thank You**

# Note all the plans and the pictures are attached in the submission, i couldn't upload any of them on to the colab without the whole file crashing and losing acess

# problem 1

plan

draft one
"""

class Solution(object):
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        word = []

        for i in range(n):
            if i % 3 == 0 and i % 5 == 0:
                word.append("FizzBuzz")
            elif i % 3 == 0:
                word.append("Fizz")
            elif i % 5 == 0:
                word.append("Buzz")
            else:
                word.append(str(i))
        return word

"""final code"""

class Solution(object):
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        word = []

        for i in range(1,n+1):
            if i % 3 == 0 and i % 5 == 0:
                word.append("FizzBuzz")
            elif i % 3 == 0:
                word.append("Fizz")
            elif i % 5 == 0:
                word.append("Buzz")
            else:
                word.append(str(i))
        return word

"""review"""

class Solution(object):
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        word = []
        # I fixed the range function by being more speific and adding a start and end propertly
        for i in range(1,n+1):
            if i % 3 == 0 and i % 5 == 0:
                word.append("FizzBuzz")
            elif i % 3 == 0:
                word.append("Fizz")
            elif i % 5 == 0:
                word.append("Buzz")
            else:
                word.append(str(i))
        return word

"""contributions

I googled how to set up a range function correctly. I thought that my if statements were the right thing to do and thought that I coded it correctly, so I wanted to make sure that my range was set up correctly.

# problem 2

plan

draft
"""

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if str(x) == str(x)[::-1]:
            return True
        else:
            return False

"""final draft"""

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if str(x) == str(x)[::-1]:
            return True
        else:
            return False

"""review"""

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if str(x) == str(x)[::-1]:
            return True
        else:
            return False
        # there wasnt really any mistake and the code works just fine

"""contributions

I had prior knowledage about slicing and remmeber how to use theme so I just used them.

# problem 3

plan

draft
"""

class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        word = (str(x)[::-1])

        return word

"""final code"""

class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        # I used chatgpt to figture out why my code wasnt running and first of all I needed to turn it back into a interger, and than I needed to check if it's a
        # negitive so that i can flip the sign propertly
        if x < 0:
            word = -int(str(-x)[::-1])
        else:
            word = int(str(x)[::-1])

        return word

"""fixes"""

class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        # I used chatgpt to figture out why my code wasnt running and first of all I needed to turn it back into a interger, and than I needed to check if it's a
        # negitive so that i can flip the sign propertly
        if x < 0:
            word = -int(str(-x)[::-1])
        else:
          # I need a negitive sign there so that it can flip the sign, for example -10 is -10, -(-10) is 10. because im putting the negitive sign outside the whole thing
            word = int(str(x)[::-1])

        return word

"""contributions

I did use AI (chatgpt) to figture out what i did wrong and it gave me really good insight to my issue and I learnt from it. It also helped me view the problem differently.

# problem 4

plan

draft
"""

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        Tnumbers = []

        for num in nums:
            for num2 in nums:
                if num != num2:
                    if num + num2 == target:
                        Tnumbers.append[num]
                        Tnumbers.append[num2]

        return Tnumbers

"""final code"""

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        Tnumbers = []

        for num in range(len(nums)):
            for num2 in range(len(nums)):
                if num != num2:
                    if nums[num] + nums[num2] == target:
                        Tnumbers.append(nums[num])
                        Tnumbers.append(nums[num2])
                        return [num, num2]

        #return Tnumbers

"""fixes"""

# I did use chatgpt to fix this code and understand where my logic didnt make sense
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        Tnumbers = []
        # first of all I didn't need the list, I could just return the 2 indices
        for num in range(len(nums)):
            for num2 in range(len(nums)):
              # I had to change my for loops because with the other one I couldn't really get the indices as easily.
                if num != num2:
                    if nums[num] + nums[num2] == target:
                        Tnumbers.append(nums[num])
                        Tnumbers.append(nums[num2])
                        return [num, num2]
                        # than I had to change some of the values to get the indices instead of just the values.

        #return Tnumbers

"""contributions

I used chatgpt to understand my mistakes and learn from them.

# problem 5

plan

draft
"""

class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        newlist = []
        for word in s:
            if word.isalpha() == True:
                newlist.append(word)


            return newlist[::-1]

"""final draft  """

class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        newlist = []
        for word in s:
            if word.isalpha() == True:
                newlist.append(word.lower())
        if newlist == newlist[::-1]:
            return True
        else:
            return False

"""fixes"""

class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        newlist = []
        for word in s:
            if word.isalpha() == True:
              #I had to make sure that everything was in lower case
                newlist.append(word.lower())
        if newlist == newlist[::-1]:

          # in my first return statement I was just reversing it, not actually
          # checking it
            return True
        else:
            return False

"""contributions

I have to google a couple of stuff like the isalpha function. I also had to look up how to use the lower function as well.
"""